package pacvitor;

import java.awt.*;

public class cimage
{
	public static void drawDot(Image img)
	{
		Graphics g=img.getGraphics();
		g.setColor(Color.yellow);
		g.drawRect(0,0,2,2);
		g.dispose();
	}

	public static void drawPowerDot(Image img)
	{
		Graphics g=img.getGraphics();
		g.setColor(Color.black);
		g.fillRect(0,0,16,16);
		g.setColor(Color.yellow);
		int iConter=0;
		short sombra=0x01;
		for (int i=0; i<16; i++)
			for (int j=0; j<16; j++)
			{
				if ((power_bits[iConter] & sombra)!=0)
					g.fillRect(j,i,1,1);
				sombra <<=1;
				if ((sombra&0xff)==0)
				{
					sombra=0x01;
					iConter++;
				}
			}
		g.dispose();
	}
	
	public static void drawCereja(Image img)
	{
		Graphics g=img.getGraphics();
		g.setColor(Color.black);
		g.fillRect(0,0,16,16);
		g.setColor(Color.magenta);
		int iConter=0;
		short sombra=0x01;
		for (int i=0; i<16; i++)
			for (int j=0; j<16; j++)
			{
				if ((cereja_bits[iConter] & sombra)!=0)
					g.fillRect(j,i,1,1);
				sombra <<=1;
				if ((sombra&0xff)==0)
				{
					sombra=0x01;
					iConter++;
				}
			}
		g.dispose();
	}

	public static void drawMorango(Image img)
	{
		Graphics g=img.getGraphics();
		g.setColor(Color.black);
		g.fillRect(0,0,16,16);
		g.setColor(Color.red);
		int iConter=0;
		short sombra=0x01;
		for (int i=0; i<16; i++)
			for (int j=0; j<16; j++)
			{
				if ((morango_bits[iConter] & sombra)!=0)
					g.fillRect(j,i,1,1);
				sombra <<=1;
				if ((sombra&0xff)==0)
				{
					sombra=0x01;
					iConter++;
				}
			}
		g.dispose();
	}	

	public static void drawPac(Image img, int dir, int cntd)
	{
		Graphics g=img.getGraphics();
		g.setColor(Color.black);
		g.fillRect(0,0,18,18);
		g.setColor(Color.yellow);
		int iConter=0;
		short sombra=0x01;
		for (int i=0; i<16; i++)
			for (int j=0; j<16; j++)
			{
				if ((pac_bits[dir][cntd][iConter] & sombra)!=0)
					g.fillRect(j+1,i+1,1,1);
				sombra <<=1;
				if ((sombra&0xff)==0)
				{
					sombra=0x01;
					iConter++;
				}
			}
		g.dispose();
	}

	public static void drawFantasma(Image img, int number, Color color)
	{
		Graphics g=img.getGraphics();
		g.setColor(Color.black);
		g.fillRect(0,0,18,18);
		g.setColor(color);
		int iConter=0;
		short sombra=0x01;
		for (int i=0; i<16; i++)
			for (int j=0; j<16; j++)
			{
				if ((fantasma_bits[number][iConter] & sombra)!=0)
					g.fillRect(j+1,i+1,1,1);
				sombra <<=1;
				if ((sombra&0xff)==0)
				{
					sombra=0x01;
					iConter++;
				}
			}
		g.dispose();
	}

	/**
	Array de Imagens Bitmap
	*/
	static final short [][][] pac_bits =
	{	// [4][4][32]
		// direita
		{
			{  0xe0, 0x07, 0xf8, 0x1f, 0xfc, 0x0f, 0xfe, 0x07, 0xfe, 0x03, 0xff, 0x01,
				0xff, 0x00, 0x7f, 0x00, 0x7f, 0x00, 0xff, 0x00, 0xff, 0x01, 0xfe, 0x03,
				0xfe, 0x07, 0xfc, 0x0f, 0xf8, 0x1f, 0xe0, 0x07},
				{  0xe0, 0x07, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xfe, 0x3f, 0xff, 0x0f,
					0xff, 0x03, 0xff, 0x00, 0xff, 0x00, 0xff, 0x03, 0xff, 0x0f, 0xfe, 0x3f,
					0xfe, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xe0, 0x07},
					{  0xe0, 0x07, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xfe, 0x7f, 0xff, 0xff,
						0xff, 0x1f, 0xff, 0x01, 0xff, 0x01, 0xff, 0x1f, 0xff, 0xff, 0xfe, 0x7f,
						0xfe, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xe0, 0x07},
						{  0xe0, 0x07, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xfe, 0x7f, 0xff, 0xff,
							0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f,
							0xfe, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xe0, 0x07},
		},
		// cima
		{
			{  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x06, 0x60, 0x0f, 0xf0,
				0x1f, 0xf8, 0x3f, 0xfc, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f,
				0xfe, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xe0, 0x07},
				{  0x00, 0x00, 0x08, 0x10, 0x1c, 0x38, 0x1e, 0x78, 0x3e, 0x7c, 0x3f, 0xfc,
					0x7f, 0xfe, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f,
					0xfe, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xe0, 0x07},
					{  0x20, 0x04, 0x38, 0x1c, 0x3c, 0x3c, 0x7e, 0x7e, 0x7e, 0x7e, 0x7f, 0xfe,
						0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f,
						0xfe, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xe0, 0x07},
						{  0xe0, 0x07, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xfe, 0x7f, 0xff, 0xff,
							0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f,
							0xfe, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xe0, 0x07}
		},
		// esquerda
		{
			{  0xe0, 0x07, 0xf8, 0x1f, 0xf0, 0x3f, 0xe0, 0x7f, 0xc0, 0x7f, 0x80, 0xff,
				0x00, 0xff, 0x00, 0xfe, 0x00, 0xfe, 0x00, 0xff, 0x80, 0xff, 0xc0, 0x7f,
				0xe0, 0x7f, 0xf0, 0x3f, 0xf8, 0x1f, 0xe0, 0x07},
				{  0xe0, 0x07, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xfc, 0x7f, 0xf0, 0xff,
					0xc0, 0xff, 0x00, 0xff, 0x00, 0xff, 0xc0, 0xff, 0xf0, 0xff, 0xfc, 0x7f,
					0xfe, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xe0, 0x07},
					{  0xe0, 0x07, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xfe, 0x7f, 0xff, 0xff,
						0xf8, 0xff, 0x80, 0xff, 0x80, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xfe, 0x7f,
						0xfe, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xe0, 0x07},
						{  0xe0, 0x07, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xfe, 0x7f, 0xff, 0xff,
							0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f,
							0xfe, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xe0, 0x07}
		},
		// baixo
		{
			{  0xe0, 0x07, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xfe, 0x7f, 0xff, 0xff,
				0xff, 0xff, 0x7f, 0xfe, 0x3f, 0xfc, 0x1f, 0xf8, 0x0f, 0xf0, 0x06, 0x60,
				0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
				{  0xe0, 0x07, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xfe, 0x7f, 0xff, 0xff,
					0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0x7f, 0xfe, 0x3f, 0xfc, 0x3e, 0x7c,
					0x1e, 0x78, 0x1c, 0x38, 0x08, 0x10, 0x00, 0x00},
					{  0xe0, 0x07, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xfe, 0x7f, 0xff, 0xff,
						0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0x7f, 0xfe, 0x7e, 0x7e,
						0x7e, 0x7e, 0x3c, 0x3c, 0x38, 0x1c, 0x20, 0x04},
						{  0xe0, 0x07, 0xf8, 0x1f, 0xfc, 0x3f, 0xfe, 0x7f, 0xfe, 0x7f, 0xff, 0xff,
							0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f,
							0xfe, 0x7f, 0xfc, 0x3f, 0xf8, 0x1f, 0xe0, 0x07}
		}
	};

	static final short [][] fantasma_bits = {	// [3][32]
		{   0xe0, 0x07, 0xf8, 0x1f, 0xcc, 0x33, 0xbc, 0x3d, 0xfe, 0x7f, 0xde, 0x7b,
			0x8e, 0x71, 0x9e, 0x79, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f, 0xfe, 0x7f,
			0xfe, 0x7f, 0x76, 0x6e, 0x76, 0x6e, 0x24, 0x24},
			{   0xe0, 0x07, 0x18, 0x18, 0x04, 0x20, 0x04, 0x20, 0x32, 0x4c, 0x4a, 0x52,
				0x8a, 0x51, 0x8a, 0x51, 0x72, 0x4e, 0x02, 0x40, 0x02, 0x40, 0x02, 0x40,
				0x8a, 0x51, 0x56, 0x6a, 0x52, 0x4a, 0x24, 0x24},
				// fraco
				{   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0c, 0x48, 0x12,
					0x88, 0x11, 0x88, 0x11, 0x70, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
	};

	static final short [] power_bits =
	{   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xe0, 0x07, 0xf0, 0x0f,
		0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf0, 0x0f, 0xe0, 0x07,
		0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	
	static final short [] cereja_bits =
		{   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xe0, 0x07, 0xf0, 0x0f,
			0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf0, 0x0f, 0xe0, 0x07,
			0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
	
	static final short [] morango_bits =
		{   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x03, 0xe0, 0x07, 0xf0, 0x0f,
			0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf8, 0x1f, 0xf0, 0x0f, 0xe0, 0x07,
			0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		};
		
	
}

